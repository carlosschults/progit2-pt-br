=== Configurando uma conta

(((GitHub, user accounts)))
A primeira coisa que você precisa fazer é configurar uma conta gratuita de usuário.
Simplesmente visite https://github.com[], escolha um nome de usuário que esteja disponível, forneça uma conta de email e uma senha, então clique no grande botão verde "Sign up for GitHub"

.O formulário de Sign-in do GitHub.
image::images/signup.png[The GitHub sign-up form.]

A próxima coisa que você verá é a página de preços para planos melhores, mas pode ignorar isso por enquanto.
O GitHub vai te enviar um email para verificar o email que você forneceu.
Vá em frente e verifique, é muito importante (como veremos mais tarde).

[NOTE]
====

O GitHub oferece quase todas as suas funcionalidades com contas gratuitas, exceto algumas funções avançadas.
Os planos pagos do GitHub incluem ferramentas e funcionalidades avançadas, bem como limites maiores para serviços gratuitos, mas nós não vamos abordá-los neste livro.
====

Clicando na logo do Octocat no canto superior esquerdo da tela você vai para a página de dashboard.
Você está pronto para usar o GitHub.

==== Acesso SSH

(((SSH keys, with GitHub)))

A partir de agora, você é completamente capaz de se conectar aos repositórios GitHub usando o protocolo  `https://`, autenticando com o nome de usuário e senha que você forneceu.
Entretanto, para simplesmente clonar repositórios públicos, você não precisa nem mesmo estar logado - a conta que criamos vem à tona quando fazemos fork nos nossos projetos e dermos push em nossos forks mais para frente.

Se você quiser usar repositórios remotos via SSH, você precisa configurar uma chave pública.
Se você ainda não tiver uma, veja <<ch04-git-server#r_generate_ssh_key>>.
Abra as configurações da sua conta usando o link no canto superior direito da janela:

.Link para ``Account settings''.
image::images/account-settings.png[The ``Account settings'' link.]

Então selecione a seção "´SSH keys´´" no lado esquerdo.

.Link para ``SSH keys''.
image::images/ssh-keys.png[The ``SSH keys'' link.]

A partir daí, clique no botão "`Add an SSH key`", dê um nome para a chave, copie o conteúdo do seu `~/.ssh/id_rsa.pub` (ou qualquer que seja o nome) arquivo de chave pública no text area e clique ``Add key''.

[NOTE]
====

Certifique-se de colocar um nome que possa lembrar para sua chave SSH.
Você pode nomear cada uma das suas chaves (e.g. "Meu laptop" or "Conta atual") então se você precisar fazer revoke de uma chave você pode facilmente dizer qual você está procurando.
====

[[r_personal_avatar]]
==== Seu Avatar

A seguir, caso queira, você pode substituir o avatar que é gerado para você com uma imagem de sua escolha. Primeiro vá para a aba ``Profile'' (acima da aba SSH Keys) e clique em ``Upload new picture''.

.Link para ``Profile''.
image::images/your-profile.png[The ``Profile'' link.]

Nós vamos escolher uma cópia da logo do Git que está  no nosso disco rígido e então podemos recortá-lo.

.Recorte seu Avatar
image::images/avatar-crop.png[Crop your uploaded avatar.]

Agora sempre que você interagir no site, as pessoas verão seu avatar próximo do seu nome.

Se de repente você tiver carregado um avatar para um serviço Gravatar (geralmente usado para contas Wordpress), este avatar será usado por padrão e você não precisa seguir este passo.

==== Seus endereços de email

A maneira que o GitHub mapeia seus commits do Git para seu usuário é pelo endereço de email.
Se você utiliza múltiplos endereços de email nos seus commits e deseja que o GitHub os conecte adequadamente, você precisa adicionar todos os endereços de email que você usou na seção Email da seção admin.

[[r_add_email_addresses]]
.Adicionar endereços de email
image::images/email-settings.png[Add all your email addresses.]

Em <<r_add_email_addresses>> podemos ver alguns dos diferentes estados possíveis.
O endereço no topo é verificado e definido como endereço padrão, o que significa que é onde você vai receber  quaisquer notificações e convites.
O segundo endereço é verificado e então pode ser definido como endereço padrão caso você queira trocá-los.
O último endereço não é verficado, o que significa que você não pode torná-lo seu endereço padrão.
Caso GitHub encontre qualquer um desses endereços em mensagens commit em qualquer repositório no site ele será linkado para seu usuário.

==== Autenticação de Dois Fatores

Finalmente, para uma segurança extra, você realmente deveria usar uma Autenticação de Dois Fatores ou ``2FA''.
Autenticação de Dois Fatores é um mecanismo de autenticação que está se tornando cada vez mais popular para reduzir o risco de sua conta ser compromissada caso sua senha seja roubada.
Utilizando esse método, o GitHub vai pedir dois métodos diferentes de autenticação, então se um deles for compromissado um invasor não terá acesso total a sua conta. 

Você pode encontrar o Two-factor Authentication setup abaixo da Security tab do seu Account settings.

.2FA na Security Tab
image::images/2fa-1.png[2FA in the Security Tab]

Se você clicar no botão ``Set up two-factor authentication'', será levado para uma página de autenticação onde você pode escolher usar um aplicativo de celular para gerar um código secundário (uma ``senha única baseada no tempo'') ou mandar o GitHub enviar um código via SMS toda vez que você faz login.

Depois que escolher qual método você prefere e seguir as instruções para configurar um 2FA, sua conta ficará um pouco mais segura e você terá que fornecer um código além de sua senha sempre que você fizer login no GitHub.
